import { Telegraf, Markup, Context } from 'telegraf'
import { CallbackQuery } from 'telegraf/typings/core/types/typegram'
import { config } from '@/config/env'
import { servicesList, messages, backToMenuButton, mainMenuMarkup } from '@/config/vars'
import { setupFormHandler } from '@/services/formHandler'
import { initPayment } from '@/services/payment'

const bot = new Telegraf(config.telegramToken)

const adminChatId = config.adminChatId || ''

bot.start((ctx: Context) => {
    ctx.reply(
        messages.helloMessage,
        {
            parse_mode: 'HTML',
            reply_markup: mainMenuMarkup.reply_markup
        }
    )
})

bot.hears('–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ—É—Ä–æ–∫ + –≥–∞–π–¥', (ctx: Context) => {
    const service = servicesList.find(service => service.id === '1')

    if (!service) {
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ', {
            parse_mode: 'HTML',
            reply_markup: Markup.keyboard([...backToMenuButton]).resize().reply_markup
        })
    }

    ctx.reply(service.description, {
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(`${service.buttonName} (${service.price} ‚ÇΩ)`, `buy_${service.id}`)],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]).reply_markup
    })
})

bot.hears('PDF-–∫–Ω–∏–≥–∞ ‚Äú–ö–æ–∂–∞ –∏ –≤—Ä–æ—Å—à–∏–µ‚Äù', (ctx: Context) => {
    const service = servicesList.find(service => service.id === '2')
     if (!service) {
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ', {
            parse_mode: 'HTML',
            reply_markup: Markup.keyboard([...backToMenuButton]).resize().reply_markup
        })
    }

    ctx.reply(service.description, {
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(`${service.buttonName} (${service.price} ‚ÇΩ)`, `buy_${service.id}`)],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]).reply_markup
    })
})

bot.hears('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –¥–µ–ø–∏–ª—è—Ü–∏–∏', (ctx: Context) => {
    ctx.reply(messages.signUpForTraining, Markup.keyboard([['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å'], backToMenuButton]))
})

bot.hears('–û –ø—Ä–æ–¥—É–∫—Ç–µ', (ctx: Context) => {
    ctx.reply(messages.aboutProduct, Markup.keyboard([...backToMenuButton]))
})

bot.action(/buy_/, async (ctx: Context) => {
  const callbackQuery = ctx.callbackQuery

  if (!callbackQuery || !('data' in callbackQuery)) {
    return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.')
  }

  const serviceId = callbackQuery.data.replace('buy_', '')
  const service = servicesList.find(s => s.id === serviceId)

  if (!service) {
    return ctx.reply('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { parse_mode: 'HTML' })
  }

  const orderId = `${service.id}_${ctx.from?.id || 'unknown'}`

  try {
    const payment = await initPayment(
      service.price,
      orderId,
      service.name,
      service.paymentDescription || '',
      'test@test.ru',
      '+79999999999'
    )

    if (payment?.PaymentURL) {
      await ctx.reply(
        `<b>–û–ø–ª–∞—Ç–∞ ${service.name}</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                  url: payment.PaymentURL,
                },
              ],
            ],
          },
        }
      )
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã:', payment)
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:', error)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø–ª–∞—Ç—ã.')
  }
})

bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', (ctx: Context) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuMarkup)
})

export const startBot = () => {
    bot.launch()
    console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
}
