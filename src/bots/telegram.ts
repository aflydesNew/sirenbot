import { Telegraf, Markup, Context } from 'telegraf'
import { CallbackQuery } from 'telegraf/typings/core/types/typegram'
import { config } from '@/config/env'
import { servicesList, messages, backToMenuButton, mainMenuMarkup } from '@/config/vars'
import { setupFormHandler } from '@/services/formHandler'

const bot = new Telegraf(config.telegramToken)

const adminChatId = config.adminChatId || ''

bot.start((ctx: Context) => {
    ctx.reply(
        messages.helloMessage,
        {
            parse_mode: 'HTML',
            reply_markup: mainMenuMarkup.reply_markup
        }
    )
})

bot.hears('–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ—É—Ä–æ–∫ + –≥–∞–π–¥', (ctx: Context) => {
    const service = servicesList.find(service => service.id === '1')

    if (!service) {
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ', {
            parse_mode: 'HTML',
            reply_markup: Markup.keyboard([...backToMenuButton]).resize().reply_markup
        })
    }

    ctx.reply(service.description, {
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(`${service.buttonName} (${service.price} ‚ÇΩ)`, `buy_${service.id}`)],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]).reply_markup
    })
})

bot.hears('PDF-–∫–Ω–∏–≥–∞ ‚Äú–ö–æ–∂–∞ –∏ –≤—Ä–æ—Å—à–∏–µ‚Äù', (ctx: Context) => {
    const service = servicesList.find(service => service.id === '2')
     if (!service) {
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ', {
            parse_mode: 'HTML',
            reply_markup: Markup.keyboard([...backToMenuButton]).resize().reply_markup
        })
    }

    ctx.reply(service.description, {
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(`${service.buttonName} (${service.price} ‚ÇΩ)`, `buy_${service.id}`)],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
        ]).reply_markup
    })
})

bot.hears('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –¥–µ–ø–∏–ª—è—Ü–∏–∏', (ctx: Context) => {
    ctx.reply(messages.signUpForTraining, Markup.keyboard([['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å'], backToMenuButton]))
})

bot.hears('–û –ø—Ä–æ–¥—É–∫—Ç–µ', (ctx: Context) => {
    ctx.reply(messages.aboutProduct, Markup.keyboard([...backToMenuButton]))
})

bot.action(/buy_/, async (ctx: Context) => {
    const callbackQuery = ctx.callbackQuery
    if (callbackQuery && 'data' in callbackQuery) {
        const serviceId = callbackQuery.data.replace('buy_', '')
        const service = servicesList.find(s => s.id === serviceId)

        if (!service) {
            return ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { parse_mode: 'HTML' })
        }

        await ctx.reply(
            `<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É:</b> ${service.name}\n\n<b>–¶–µ–Ω–∞:</b> ${service.price} ‚ÇΩ`,
            {
                parse_mode: 'HTML',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Tinkoff', `pay_tinkoff_${service.id}`)],
                    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_menu')]
                ]).reply_markup
            }
        )
    }
})

bot.action(/pay_tinkoff_/, async (ctx: Context) => {
    const callbackQuery = ctx.callbackQuery

    if (!callbackQuery || !('data' in callbackQuery)) {
        return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.')
    }

    const serviceId = callbackQuery.data.replace('pay_tinkoff_', '')
    const service = servicesList.find(s => s.id === serviceId)

    if (!service) {
        return ctx.reply('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { parse_mode: 'HTML' })
    }

    await ctx.reply(
        `<b>–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞</b>\n\n–í—ã –±—ã –æ–ø–ª–∞—Ç–∏–ª–∏: <b>${service.name}</b> –∑–∞ <b>${service.price} ‚ÇΩ</b>\n\n‚ö†Ô∏è –ü–æ–∫–∞ —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.`,
        { parse_mode: 'HTML' }
    )
})

bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', (ctx: Context) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuMarkup)
})

export const startBot = () => {
    bot.launch()
    console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
}
